import streamlit as st
import requests
import pandas as pd

# Configuration de la mise en page
st.set_page_config(
    page_title="NLP Topic Modeling",
    page_icon="üß†",
    layout="wide"
)

# En-t√™te principal avec un titre stylis√©
st.title("üß† Pr√©diction Topic Modeling")

# Introduction
st.markdown("""
Bienvenue sur l'interface de d√©ploiement du projet **NLP Topic Modeling**.
Utilisez cette application pour tester la connexion √† l'API et pr√©dire les th√®mes d'un texte √† l'aide de mod√®les de traitement du langage naturel (NLP).
""")

# Section pour tester la connexion avec l'API
st.header("üîå Tester la connexion √† l'API")

# Utilisation de colonnes pour une pr√©sentation plus fluide
col1, col2 = st.columns([2, 5])

with col1:
    st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Lightbulb_icon.svg/2048px-Lightbulb_icon.svg.png", width=100)

with col2:
    # Bouton pour tester la connexion √† l'API
    if st.button("üîç Tester la connexion API"):
        try:
            # URL de l'API pour v√©rifier son statut
            status_url = "https://topicwebapp-g0g7hshfhugta5cy.francecentral-01.azurewebsites.net/status"
            response = requests.get(status_url)

            # Afficher la r√©ponse
            if response.status_code == 200:
                st.success("L'API est en ligne! üöÄ")
            else:
                st.error(f"Erreur de connexion √† l'API: {response.status_code}")
        except Exception as e:
            st.error(f"Erreur lors de la tentative de connexion: {e}")

# S√©paration visuelle
st.markdown("---")

# Section pour faire une pr√©diction
st.header("üìù Faire une pr√©diction sur un texte")

# Explication suppl√©mentaire
st.markdown("Entrez un texte dans la zone ci-dessous et obtenez une pr√©diction sur les topics probables.")

# Utilisation d'une zone de texte pour entrer le texte utilisateur
user_input = st.text_area("üí¨ Entrez le texte pour lequel vous souhaitez pr√©dire les topics:", height=150)

# Liste statique des th√®mes
themes = [
    "Dynamique des Fluides et √ânerg√©tique",
    "Physique Quantique et Magn√©tisme",
    "Apprentissage Automatique et Intelligence Artificielle",
    "R√©seaux Neuronaux et Apprentissage Profond",
    "Algorithmes et Th√©orie de la Complexit√©",
    "Astrophysique et Formation des Galaxies",
    "Cosmologie et Observation Radio",
    "Mod√©lisation Math√©matique et M√©thodes Approximatives",
    "Th√©orie de l'Information et Communication",
    "Analyse des R√©seaux Sociaux et des Donn√©es"
]

# Fonction pour faire la pr√©diction
def make_prediction():
    predict_url = "https://topicwebapp-g0g7hshfhugta5cy.francecentral-01.azurewebsites.net/predict"
    data = {"text": user_input}
    response = requests.post(predict_url, json=data)

    if response.status_code == 200:
        prediction = response.json()
        topics = prediction.get("topic_distribution", [])

        # Afficher les donn√©es pour d√©bogage

        if topics:
            # Convertir les donn√©es en DataFrame
            df = pd.DataFrame(topics)
            df["probability"] = df["probability"].apply(lambda x: f"{x:.2f}")
            st.session_state.topics = topics
            st.session_state.prediction_df = df

            # Trouver le th√®me avec la probabilit√© la plus √©lev√©e
            max_prob_topic = max(topics, key=lambda x: float(x["probability"]))
            st.session_state.predicted_theme = max_prob_topic["theme"]
            st.session_state.predicted_value = st.session_state.predicted_theme  # Garder le th√®me comme cha√Æne
            st.success("Pr√©diction effectu√©e! üéâ")
        else:
            st.warning("Aucune distribution de topics re√ßue.")
    else:
        st.error(f"Erreur de pr√©diction: {response.status_code}")

# Afficher le bouton pour faire la pr√©diction
if st.button("üìä Valider"):
    if user_input.strip():
        make_prediction()
    else:
        st.warning("‚ö†Ô∏è Veuillez entrer un texte avant de valider.")

# V√©rifier si une pr√©diction a √©t√© faite et afficher les r√©sultats
if "prediction_df" in st.session_state:
    st.write("### üìã Distribution des Topics")
    st.table(st.session_state.prediction_df)

    # Section de feedback
    st.markdown("---")
    st.header("üó£Ô∏è Envoyer votre feedback")

    # Menu d√©roulant pour s√©lectionner le th√®me r√©el parmi la liste statique
    real_value = st.selectbox("üîç S√©lectionnez le th√®me r√©el:", themes, index=themes.index(st.session_state.predicted_theme))

    if st.button("üì§ Envoyer le feedback"):
        try:
            # URL de l'API pour envoyer le feedback
            feedback_url = "https://topicwebapp-g0g7hshfhugta5cy.francecentral-01.azurewebsites.net/feedback_topic"

            # Donn√©es √† envoyer √† l'API
            feedback_data = {
                "text_input": user_input,  # Texte utilis√© pour la pr√©diction
                "predicted_value": st.session_state.predicted_value,  # Le th√®me pr√©dit
                "real_value": real_value
            }


            # Requ√™te POST pour envoyer le feedback
            feedback_response = requests.post(feedback_url, json=feedback_data)

            # V√©rifier la r√©ponse de l'API
            if feedback_response.status_code == 200:
                st.success("Merci pour votre feedback! üëç")
            else:
                st.error(f"Erreur lors de l'envoi du feedback: {feedback_response.status_code}")
                st.write("R√©ponse de l'API:", feedback_response.json())  # Afficher la r√©ponse d'erreur pour d√©bogage
        except Exception as e:
            st.error(f"Erreur lors de l'envoi du feedback: {e}")
